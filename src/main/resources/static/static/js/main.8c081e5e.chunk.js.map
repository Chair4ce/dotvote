{"version":3,"sources":["api/exercise/Queries/FETCH_EXERCISES.ts","component/views/ExerciseView.tsx","App.tsx","reportWebVitals.ts","apolloClient.ts","index.tsx"],"names":["FETCH_EXERCISES","gql","ExerciseView","props","useQuery","loading","error","data","data-testid","className","message","undefined","exercises","map","exercise","name","id","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","cache","InMemoryCache","connectToDevTools","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sYAEO,IAAMA,EAAkBC,cAAH,KC+BbC,EApBuB,SAACC,GAAW,IAAD,EAEdC,mBAAwBJ,GAAhDK,EAFsC,EAEtCA,QAASC,EAF6B,EAE7BA,MAAOC,EAFsB,EAEtBA,KAEvB,OACI,qBAAKC,cAAY,gBAAgBC,UAAW,gBAA5C,SACKJ,EAAU,4CACPC,EAAQ,wCAAWA,EAAMI,WACrBH,QAAiBI,IAATJ,EACJ,8BACKA,EAAKK,UAAUC,KAAI,SAACC,GAAD,OAChB,qBAAKN,cAAa,eAAgBC,UAAW,UAA7C,SACI,4BAAIK,EAASC,QAD4CD,EAASE,SAI5E,QChBXC,MARf,WACI,OACI,qBAAKT,cAAY,MAAMC,UAAU,MAAjC,SACI,cAAC,EAAD,OCOGS,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCECQ,EARA,IAAIC,eACf,CACIC,IAAK,oCACLC,MAAO,IAAIC,gBACXC,mBAAmB,ICC3BC,IAASC,OACP,cAAC,IAAMC,WAAP,UACI,cAAC,iBAAD,CAAgBR,OAAQA,EAAxB,SACF,cAAC,EAAD,QAGFS,SAASC,eAAe,SAM1BnB,M","file":"static/js/main.8c081e5e.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\n\nexport const FETCH_EXERCISES = gql`\n    query getExercises{\n        exercises {\n            id\n            name\n        }\n    }\n`;\n","import React from \"react\";\nimport ExerciseModel from \"../../api/exercise/ExerciseModel\";\nimport {useQuery} from \"@apollo/client\";\nimport {FETCH_EXERCISES} from \"../../api/exercise/Queries/FETCH_EXERCISES\";\n\nexport interface ExcerciseData {\n    exercises: ExerciseModel[];\n}\n\nexport interface Props {\n    className?: String;\n}\n\nconst ExerciseView: React.FC<Props> = (props) => {\n\n    const {loading, error, data} = useQuery<ExcerciseData>(FETCH_EXERCISES);\n\n    return (\n        <div data-testid=\"exercise-view\" className={'exercise_view'}>\n            {loading ? <p>Loading... </p> :\n                error ? <p>Uh oh! {error.message}</p> :\n                    data && data !== undefined ?\n                        <div>\n                            {data.exercises.map((exercise: any) => (\n                                <div data-testid={\"exercise-row\"} className={'dataRow'} key={exercise.id}>\n                                    <p>{exercise.name}</p></div>\n                            ))}\n                        </div>\n                        : null}\n        </div>\n    )\n}\n\nexport default ExerciseView;\n\n","import React from 'react';\nimport './component/App.css';\nimport ExerciseView from \"./component/views/ExerciseView\";\n\nfunction App() {\n    return (\n        <div data-testid=\"app\" className=\"App\">\n            <ExerciseView/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\n\nconst client = new ApolloClient(\n    {\n        uri: 'http://localhost:8080/api/graphql',\n        cache: new InMemoryCache(),\n        connectToDevTools: true,\n    },\n);\n\nexport default client;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {ApolloProvider} from \"@apollo/client\";\nimport client from \"./apolloClient\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <ApolloProvider client={client}>\n    <App />\n      </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}